;; -*- lisp -*-

(in-package :stumpwm)

(load "/usr/share/common-lisp/source/stumpwm/contrib/net.lisp")
(load "/usr/share/common-lisp/source/stumpwm/contrib/cpu.lisp")
(load "/usr/share/common-lisp/source/stumpwm/contrib/notifications.lisp")

(set-prefix-key (kbd "C-y"))

(defun cat (&rest strings) "A shortcut for (concatenate 'string foo bar)."
  (apply 'concatenate 'string strings))

(defvar *foreground-color* "darkcyan")
(defvar *background-color* "gray")
(defvar *mode-line-bg-color* "black")
(defvar *border-color* *foreground-color*)
(defvar *terminal* "mate-terminal")
(defvar *home-directory* "/home/pwoolcock")
(defvar *terminal-command* *terminal*)
(setf *focus-color* "green"
      *unfocus-color* "black")

;; Startup

(run-shell-command "xscreensaver-command -exit; killall xscreensaver 2>/dev/null; xscreensaver -no-splash")
(run-shell-command "dropbox start")
(run-shell-command (cat "xsetroot -solid " *background-color*))

(run-commands
    "grename main"
    "gnewbg alt")

;; Commands 

(defcommand google (srch) ((:string "Google: "))
  "google something"
  (run-or-raise (cat "surfraw google " srch) '(:title "Google")))

(defcommand wikipedia (srch) ((:string "Wikipedia: "))
  "wikipedia something"
  (run-or-raise (cat "surfraw wikipedia " srch) '(:title "Wikipedia")))

(defcommand firefox () ()
  "run firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand my-reload () ()
  "reload stump"
  (run-commands "loadrc" "reload"))

(defcommand terminal () ()
  "run a terminal with my startup script"
  (run-or-raise "mate-terminal" '(:title "Terminal")))

(defcommand volume-up () ()
  "turn the volume up on the alsa mixer"
  (run-or-raise "amixer sset Master playback 2dB+" '(:title "Volume Up")))

(defcommand volume-down () ()
  "turn the volume up on the alsa mixer"
  (run-or-raise "amixer sset Master playback 2dB-" '(:title "Volume Up")))

(defcommand lock-screen () ()
  "lock screen"
  (run-or-raise "xscreensaver-command -lock" '(:title "Lock Screen")))

;; Key Bindings

(define-key *top-map* (kbd "M-1") "terminal")
(define-key *top-map* (kbd "M-2") "firefox")
(define-key *top-map* (kbd "M-g") "google")
(define-key *top-map* (kbd "M-w") "wikipedia")
(define-key *top-map* (kbd "M-F9") "loadrc")
(define-key *top-map* (kbd "Pause") "gother")
(define-key *top-map* (kbd "C-Pause") "grouplist")
(define-key *top-map* (kbd "KP_Up") "volume-up")
(define-key *top-map* (kbd "KP_Down") "volume-down")

(define-key *root-map* (kbd "N") '*notifications-map*)
(define-key *root-map* (kbd "C-l") "lock-screen")
(define-key *root-map* (kbd "C-Left") "move-focus left")
(define-key *root-map* (kbd "C-Right") "move-focus right")
(define-key *root-map* (kbd "C-Up") "move-focus up")
(define-key *root-map* (kbd "C-Down") "move-focus down")

(setf *mouse-focus-policy* :sloppy) ;; I know, weak sauce...


;; Theme

(set-focus-color *foreground-color*)
(set-unfocus-color *background-color*)

(set-fg-color *foreground-color*)
(set-bg-color *background-color*)
(set-border-color *border-color*)

(setf *mode-line-foreground-color* *foreground-color*)
(setf *mode-line-background-color* *mode-line-bg-color*)
(setf *mode-line-border-color* *border-color*)
(setf *mode-line-border-width* 0)
(setf *mode-line-pad-x* 0)
(setf *mode-line-pad-y* 0)
(setf *mode-line-position* :top)
(setf *mode-line-timeout* 5)
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%I:%M %p %a %F'|tr -d [:cntrl:]" t)) " | [^B%n^b] %W (^[^B^1*%N^b^])"))

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))


;; vim:ft=lisp

