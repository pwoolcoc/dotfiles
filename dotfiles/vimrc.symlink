"
" Cool VIM stuff:
"
" Double-space a file:
"
"   :g/^/put _              ; _ is the '/dev/null' register
"
" Copy lines with one pattern, then append lines with another pattern:
"
"   Q                       ; takes you into Ex mode
"   :g/^foo/y A
"   :g/^bar/y A
"   :let @+ = @a
"
" Copy entire buffer:
"
"   :%y+
"
" Paste from the stack of last-deleted lines
"
"   "1P                     ; repeatable with ., and repeating actually
"                           ; does "2P, "3P, etc
"

"call pathogen#infect()

set nocompatible

runtime! plugin/sensible.vim

set number
set encoding=utf-8

set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=tab:\ \ ,trail:·

set hlsearch
set ignorecase
set smartcase

set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.pyc,.virtualenv/*

set nospell

function! s:setupWrapping()
  setlocal wrap
  setlocal wrapmargin=2
  setlocal textwidth=72
endfunction

au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupWrapping()
au BufRead,BufNewFile *.json setlocal ft=javascript
au BufRead,BufNewfile *.txt call s:setupWrapping()
au BufRead,BufNewFile *.wsgi setlocal ft=python
au BufRead,BufNewFile *.{c,cc,h,cpp} setlocal ft=cpp
au BufNewFile,BufRead *.clj setlocal filetype=clojure
au BufNewFile,BufRead *.{txt,md,markdown,mdown,mkd,mkdn} setlocal ft=markdown
au BufNewFile,BufRead *.hx setlocal ft=haxe

au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79
au FileType make setlocal noexpandtab
au FileType rust setlocal makeprg=cargo\ build
au FileType markdown inoremap <buffer> `` “
au FileType markdown inoremap <buffer> '' ”
au FileType markdown setlocal tabstop=2 softtabstop=2 shiftwidth=2 spell
au FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
au FileType cpp setlocal shiftwidth=2 tabstop=2 softtabstop=2

map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
cmap <C-K> <C-R>=expand("%:p:h") . "/" <CR>
map <F12> :so ~/.vimrc<CR>

nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" let g:syntastic_enable_signs=1
" let g:syntastic_quiet_warnings=1


let g:gist_clip_command = 'xclip -selection clipboard'

set modeline
set modelines=10

set directory=~/.vim/backup/
set backupdir=~/.vim/backup/
set undodir=~/.vim/backup/

let mapleader=","
let g:mapleader=","

nnoremap <Leader>w :w!<CR>
nnoremap <Leader><space> :noh<CR>
nnoremap <Leader>d :bd<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>N :bp<CR>
nnoremap <Leader>q :bd<CR>
nnoremap <F5> :make<CR>
nnoremap <F9> :CPPaste<CR>

nnoremap [n :set norelativenumber<CR>
nnoremap ]n :set relativenumber<CR>

nmap <Left> <<
nmap <Right> >>
vmap <Left> <gv
vmap <Right> >gv

set background=dark
colorscheme darkblue

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" filetype: vim
