"
" Cool VIM stuff:
"
" Double-space a file:
"
"   :g/^/put _              ; _ is the '/dev/null' register
"
" Copy lines with one pattern, then append lines with another pattern:
"
"   Q                       ; takes you into Ex mode
"   :g/^foo/y A
"   :g/^bar/y A
"   :let @+ = @a
"
" Copy entire buffer:
"
"   :%y+
"
" Paste from the stack of last-deleted lines
"
"   "1P                     ; repeatable with ., and repeating actually
"                           ; does "2P, "3P, etc
"

call pathogen#infect()

set nocompatible

set number
set ruler
syntax on

set encoding=utf-8

set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=tab:\ \ ,trail:·
set scrolloff=4

set hlsearch
set incsearch
set ignorecase
set smartcase

set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

set laststatus=2


map <Leader>t :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupPython()
  set softtabstop=4
  set tabstop=4
  set shiftwidth=4
  set textwidth=79
endfunction

au FileType make set noexpandtab
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupWrapping()

au BufRead,BufNewFile *.json set ft=javascript

au BufRead,BufNewfile *.txt call s:setupWrapping()

au BufRead,BufNewFile *.wsgi set ft=python

au FileType python call s:setupPython()

set backspace=indent,eol,start

filetype plugin indent on

map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

cmap <C-K> <C-R>=expand("%:p:h") . "/" <CR>

nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1


if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif

set modeline
set modelines=10

set backupdir=~/.vim/backup
set directory=~/.vim/backup

set showcmd

let mapleader=","
let g:mapleader=","

nnoremap ; :
nnoremap <Leader>w :w!<CR>
nnoremap <Leader><space> :noh<CR>
nnoremap <Leader>d :bd<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>p :bp<CR>
nnoremap <Leader>q :bd<CR>

nnoremap [n :set number<CR>
nnoremap ]n :set relativenumber<CR>

nmap <Left> <<
nmap <Right> >>
vmap <Left> <gv
vmap <Right> >gv

inoremap jj <ESC>

if hasmapto('“')
    unmap! ``
endif

if hasmapto('”')
    unmap! ''
endif

set nospell

set wildignore+=*.pyc

au BufNewFile,BufRead *.rs set filetype=rust
au BufNewFile,BufRead *.clj set filetype=clojure
au BufNewFile,BufRead *.{txt,md,markdown,mdown,mkd,mkdn} inoremap `` “
au BufNewFile,BufRead *.{txt,md,markdown,mdown,mkd,mkdn} inoremap '' ”
au BufNewFile,BufRead *.{txt} set spell
au BufNewFile,BufRead *.{md,markdown,mdown,mkd,mkdn} set tabstop=2 softtabstop=2 shiftwidth=2

set guifont="Inconsolata-dz-Powerline"

let g:Powerline_symbols = 'fancy'

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" filetype: vim

